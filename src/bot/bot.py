import telebot
from telebot import types
from src.bot.token import TOKEN
from src.news.archive_manager import ArchiveManager
from src.news.news import News
from src.news.queue_manager import QueueManager
import src.parsing.parser
from src.bot.external import External
from src.smtp.smtp import Smtp
from src.smtp.user import User
from src.smtp.users_manager import UsersManager
from tools.tools import Tools

bot = telebot.TeleBot(TOKEN)

commands = [
    types.BotCommand('start', '–Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º'),
    types.BotCommand('add_user', '–¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'),
    types.BotCommand('remove_user', '—É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'),
    types.BotCommand('users', '–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'),
    types.BotCommand('archive', '–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞—Ä—Ö–∏–≤ –Ω–æ–≤–æ—Å—Ç–µ–π'),
    types.BotCommand('publish', '–æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å'),
    types.BotCommand('parse', '—Å–ø–∞—Ä—Å–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏'),
    types.BotCommand('cancel', '–æ—Ç–º–µ–Ω–∞'),
    types.BotCommand('exit', '–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã')
]
bot.set_my_commands(commands)

@bot.message_handler(commands=['start'])
def start(message):
    print("SMTP...")
    server = Smtp.connect()
    print(server)
    print("OK")
    bot.send_message(message.chat.id, f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! smtp-—Å–µ—Ä–≤–µ—Ä: {server.local_hostname}')
    bot.send_message(message.chat.id, '‚ùóÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É ‚è©')
    bot.send_message(message.chat.id, '/add_user - –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üòê')
    bot.send_message(message.chat.id, '/remove_user - —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ü´•')
    bot.send_message(message.chat.id, '/users - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üòêüòêüòê')
    bot.send_message(message.chat.id, '/archive - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞—Ä—Ö–∏–≤ –Ω–æ–≤–æ—Å—Ç–µ–π üìÅ')
    bot.send_message(message.chat.id, '/publish - –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å üì§')
    bot.send_message(message.chat.id, '/parse - —Å–ø–∞—Ä—Å–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ ‚å®Ô∏è')
    bot.send_message(message.chat.id, '/exit - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã üõ†')

@bot.message_handler(commands=['add_user'])
def add_user(message):
    bot.send_message(message.chat.id, '–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –≤–≤–æ–¥–∏—Ç–µ \'-\'')
    bot.send_message(message.chat.id, '–§–∞–º–∏–ª–∏—è:')
    user = User()
    bot.register_next_step_handler(message, External.get_surname, bot, user)

@bot.message_handler(commands=['remove_user'])
def remove_user(message):
    bot.send_message(message.chat.id, 'id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:')
    bot.register_next_step_handler(message, External.remove_user, bot)

@bot.message_handler(commands=['users'])
def users(message):
    Tools.display_users(message, bot, UsersManager.get_users())

@bot.message_handler(commands=['archive'])
def archive(message):
    news_list = ArchiveManager.get_archive()
    if news_list:
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ id –Ω–æ–≤–æ—Å—Ç–∏:')
        for (id, news) in news_list:
            bot.send_message(message.chat.id, f'*#{id}* {news.header} _{news.date}, {news.time}_',
                             parse_mode="Markdown")
        bot.register_next_step_handler(message, External.get_news_id, bot, news_list, False)
    else:
        bot.send_message(message.chat.id, '–ê—Ä—Ö–∏–≤ –ø—É—Å—Ç')


@bot.message_handler(commands=['publish'])
def publish(message):
    markup = types.ReplyKeyboardMarkup()
    markup.add(types.KeyboardButton('–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–≤–æ—é –Ω–æ–≤–æ—Å—Ç—å'))
    markup.add(types.KeyboardButton('–í—ã–±—Ä–∞—Ç—å –∏–∑ –æ—á–µ—Ä–µ–¥–∏'))
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=markup)

@bot.message_handler(commands=['parse'])
def parse(message):
    news_list = src.parsing.parser.parse(['https://tass.ru/'])
    bot.send_message(message.chat.id, f'–°–ø–∞—Ä—Å–µ–Ω–æ {len(news_list)} –Ω–æ–≤–æ—Å—Ç–µ–π')
    QueueManager.push_to_queue(news_list)

@bot.message_handler(commands=['cancel'])
def cancel(message):
    External.cancel(message, bot)

@bot.message_handler(commands=['exit'])
def exit(message):
    bot.send_message(message.chat.id, '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...')
    bot.send_message(message.chat.id, '–î–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start')
    Smtp.quit()

@bot.message_handler(content_types=['text'])
def handle_buttons(message):
    if message.text == '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–≤–æ—é –Ω–æ–≤–æ—Å—Ç—å':
        bot.send_message(message.chat.id, '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏:', reply_markup=types.ReplyKeyboardRemove())
        news = News()
        bot.register_next_step_handler(message, External.get_header, bot, news)
    elif message.text == '–í—ã–±—Ä–∞—Ç—å –∏–∑ –æ—á–µ—Ä–µ–¥–∏':
        news_list = QueueManager.get_queue()
        if news_list:
            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ id –Ω–æ–≤–æ—Å—Ç–∏:', reply_markup=types.ReplyKeyboardRemove())
            for (id, news) in news_list:
                bot.send_message(message.chat.id, f'*#{id}* {news.header} _{news.date}, {news.time}_', parse_mode="Markdown")
            bot.register_next_step_handler(message, External.get_news_id, bot, news_list)
        else:
            bot.send_message(message.chat.id, '–û—á–µ—Ä–µ–¥—å –Ω–æ–≤–æ—Å—Ç–µ–π –ø—É—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å /parse', reply_markup=types.ReplyKeyboardRemove())
    elif message.text == '/cancel':
        cancel(message)

print("Queue... ", end="")
QueueManager.create_queue()
print("OK")
print("Archive... ", end="")
ArchiveManager.create_archive()
print("OK")
print("Users...", end="")
UsersManager.create_users()
print("OK")
print("Polling...")
bot.polling()